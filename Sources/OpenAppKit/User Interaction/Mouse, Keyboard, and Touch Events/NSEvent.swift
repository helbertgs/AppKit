import Foundation 

@MainActor
public class NSEvent: NSObject {
}

// import Foundation

// /// An object that contains information about an input action, such as a mouse click or a key press.
// @MainActor
// public class NSEvent: NSObject {

//     //  MARK: - Creating an event object

//     /// Creates and returns a new event object that describes a key event.
//     /// - Parameters:
//     ///   - type: One of the following event-type constants: NSKeyDown, NSKeyUp, NSFlagsChanged. If anything else is specified, an NSInternalInconsistencyException is raised.
//     ///   - location: The cursor location in the base coordinate system of the window specified by windowNum.
//     ///   - flags: An integer bit field containing any of the modifier key masks described in Getting Unicode Values, combined using the C bitwise OR operator.
//     ///   - timestamp: The time the event occurred in seconds since system startup.
//     ///   - windowNum: An integer that identifies the window device associated with the event, which is associated with the NSWindow that will receive the event.
//     ///   - context: The display graphics context of the event. Pass nil for this parameter.
//     ///   - characters: A string of characters associated with the key event. Though most key events contain only one character, it is possible for a single keypress to generate a series of characters.
//     ///   - charactersIgnoringModifiers: The string of characters generated by the key event as if no modifier key had been pressed (except for Shift). This argument is useful for getting the “basic” key value in a hardware-independent manner.
//     ///   - isARepeat: true if the key event is a repeat caused by the user holding the key down, false if the key event is new.
//     ///   - code: A number that identifies the keyboard key associated with the key event. Its value is hardware-independent.
//     /// - Returns: The created NSEvent instance or nil if the instance could not be created.
//     public static func keyEvent(
//         with type: NSEvent.EventType, 
//         location: OpenCoreGraphics.CGPoint = OpenCoreGraphics.CGPoint(), 
//         modifierFlags flags: NSEvent.ModifierFlags = .init(), 
//         timestamp time: TimeInterval = Date().timeIntervalSince1970, 
//         windowNumber wNum: Int = 0, 
//         context unusedPassNil: OpaquePointer? = nil, 
//         characters keys: String, 
//         charactersIgnoringModifiers ukeys: String, 
//         isARepeat flag: Bool = false, 
//         keyCode code: Int) -> NSEvent? {
//             print("\(Self.self).\(#function)")
//             return nil
//     }

//     public init(_ type: EventType) {
//         self.type = type
//         self.subtype = .init(rawValue: 0)
//     }

//     public override required init() {
//         self.type = .systemDefined
//         self.subtype = .init(rawValue: 0)
//         super.init()
//     }

//     // MARK: - Getting the event type

//     /// The event’s type.
//     public private(set) var type: NSEvent.EventType

//     /// The event’s subtype.
//     public private(set) var subtype: NSEvent.EventSubtype

//     // MARK: - Getting general event information

//     /// The event location in the base coordinate system of the associated window.
//     /// 
//     /// This property applies to mouse events. 
//     /// For non-mouse events the value of this property is undefined.
//     /// 
//     /// With NSMouseMoved and possibly other events, the event can have a nil window (that is, the window property contains nil). In this case, this property contains the event location in screen coordinates.
//     /// 
//     /// In a method of a custom view that handles mouse events, you commonly use this property with the ``convert(_:from:)`` method of NSView to get the mouse location in the view’s coordinate system. 
//     /// The following code shows how to perform this conversion. 
//     /// The y coordinate in the returned point starts from a base of 1, and not 0.
//     public var locationInWindow: OpenCoreGraphics.CGPoint = .init()
    
//     /// The time when the event occurred in seconds since system startup.
//     public var timestamp: TimeInterval = .init()

//     /// The window object associated with the event.
//     /// Periodic events do not have a window. The result of accessing this property on a periodic event is undefined.
//     public weak var window: NSWindow?

//     /// The identifier for the window device associated with the event.
//     /// Periodic events do not have a window. The result of accessing this property on a periodic event is undefined.
//     public var windowNumber: Int

//     // MARK: - Getting modifier flags
// }

extension NSEvent {
    /// Flags that represent key states in an event object.
    @MainActor
    public enum ModifierFlags: Int, Equatable, Hashable, Sendable {

        // MARK: - Event Modifier Flags

        /// The Caps Lock key has been pressed.
        case capsLock

        /// The Shift key has been pressed.
        case shift

        /// The Control key has been pressed.
        case control

        /// The Option or Alt key has been pressed.
        case option

        /// The Command key has been pressed.
        case command

        /// A key in the numeric keypad or an arrow key has been pressed.
        case numericPad

        /// The Help key has been pressed.
        case help

        /// A function key has been pressed.
        case function

        /// Device-independent modifier flags are masked.
        case deviceIndependentFlagsMask

        /// Default value
        case none
    }
}

extension NSEvent {
    @MainActor
    public struct EventTypeMask {
    }
}

// extension NSEvent {
//     /// Constants for the types of events that responder objects can handle.
//     /// These constants appear in the event’s type property. You also use them when you construct new events.
//     @MainActor
//     public enum EventType {

//         // MARK: - Getting Mouse-Related Event Types

//         /// The user pressed the left mouse button.
//         case leftMouseDown

//         /// The user moved the mouse while holding down the left mouse button.
//         case leftMouseDragged

//         /// The user released the left mouse button.
//         case leftMouseUp

//         /// The user pressed the right mouse button.
//         case rightMouseDown

//         /// The user released the right mouse button.
//         case rightMouseUp

//         /// The user moved the mouse while holding down the right mouse button.
//         case rightMouseDragged

//         /// The user pressed a tertiary mouse button.
//         case otherMouseDown

//         /// The user moved the mouse while holding down a tertiary mouse button.
//         case otherMouseDragged

//         /// The user released a tertiary mouse button.
//         case otherMouseUp

//         /// The user moved the mouse in a way that caused the cursor to move onscreen.
//         case mouseMoved

//         /// The cursor entered a well-defined area, such as a view.
//         case mouseEntered

//         /// The cursor exited a well-defined area, such as a view.
//         case mouseExited

        
//         // MARK: - Getting Keyboard Event Types

//         /// The user pressed a key on the keyboard.
//         case keyDown

//         /// The user released a key on the keyboard.
//         case keyUp

        
//         // MARK: - Getting Touch-Based Events

//         /// An event marking the beginning of a gesture.
//         case beginGesture

//         /// An event that marks the end of a gesture.
//         case endGesture

//         /// The user performed a pinch-open or pinch-close gesture.
//         case magnify

//         /// The user performed a smart-zoom gesture.
//         case smartMagnify

//         /// The user performed a swipe gesture.
//         case swipe

//         /// The user performed a rotate gesture.
//         case rotate

//         /// The user performed a nonspecific type of gesture.
//         case gesture

//         /// The user touched a portion of the touch bar.
//         case directTouch

//         /// The user touched a point on a tablet.
//         case tabletPoint

//         /// A pointing device is near, but not touching, the associated tablet.
//         case tabletProximity

//         /// An event that reports a change in pressure on a pressure-sensitive device.
//         case pressure

//         // MARK: - Getting Other Input Types

//         /// The scroll wheel position changed.
//         case scrollWheel

//         /// The user changed the mode of a connected device.
//         case changeMode

//         // MARK: - Getting System Event Types

//         /// An AppKit-related event occurred.
//         case appKitDefined

//         /// An app-defined event occurred.
//         case applicationDefined

//         /// An event that updates the cursor.
//         case cursorUpdate

//         /// The event flags changed.
//         case flagsChanged

//         /// An event that provides execution time to periodic tasks.
//         case periodic

//         /// An event that initiates a Quick Look request.
//         case quickLook

//         /// A system-related event occurred.
//         case systemDefined
//     }
// }

// extension NSEvent {
//     /// Subtypes for various types of events.
//     /// The event subtype contains one of these constants only when the event’s type property contains ``NSAppKitDefined``, ``NSSystemDefined``, or ``NSApplicationDefined`` or a mouse-related event type.
//     /// These subtypes apply when the event type is NSEvent.EventType.appKitDefined.
//     @MainActor
//     public struct EventSubtype: @preconcurrency RawRepresentable, Sendable {
        
//         // MARK: - Getting AppKit Event Subtypes
        
//         /// An app-activation event occurred.
//         public static let applicationActivated = EventSubtype(rawValue: 1)

//         /// An app-deactivation event occurred.
//         public static let applicationDeactivated = EventSubtype(rawValue: 2)

//         /// An event that indicates a window changed screens.
//         public static let screenChanged = EventSubtype(rawValue: 3)

//         /// An event that indicates a window’s contents are visible again.
//         public static let windowExposed = EventSubtype(rawValue: 4)

//         /// An event that indicates a window moved.
//         public static let windowMoved = EventSubtype(rawValue: 5)

//          // MARK: - Accessing the Raw Value
        
//         /// The corresponding value of the raw type.
//         public let rawValue: Int

//         // MARK: - Initializers

//         public init(rawValue: Int) {
//             self.rawValue = rawValue
//         }
//     }
// }

// extension NSEvent {

//     @MainActor
//     public struct SpecialKey: Hashable, @preconcurrency RawRepresentable {

//         // MARK: - Getting Common Control Keys

//         /// The backspace key.
//         public static let backspace = SpecialKey(rawValue: 1)
        
//         /// The carriage return key.
//         public static let carriageReturn = SpecialKey(rawValue: 1)
        
//         /// The newline key.
//         public static let newline = SpecialKey(rawValue: 1)
        
//         /// The enter key.
//         public static let enter = SpecialKey(rawValue: 1)
        
//         /// The delete key.
//         public static let delete = SpecialKey(rawValue: 1)
        
//         /// The delete forward key.
//         public static let deleteForward = SpecialKey(rawValue: 1)
        
//         /// The back tab key.
//         public static let backTab = SpecialKey(rawValue: 1)
        
//         /// The tab key.
//         public static let tab = SpecialKey(rawValue: 1)
        
//         // MARK: - Getting the Navigation-Related Keys

//         /// The up arrow key.
//         public static let upArrow = SpecialKey(rawValue: 1)
        
//         /// The down arrow key.
//         public static let downArrow = SpecialKey(rawValue: 1)
        
//         /// The left arrow key.
//         public static let leftArrow = SpecialKey(rawValue: 1)
        
//         /// The right arrow key.
//         public static let rightArrow = SpecialKey(rawValue: 1)
        
//         /// The page up key.
//         public static let pageUp = SpecialKey(rawValue: 1)
        
//         /// The page down key.
//         public static let pageDown = SpecialKey(rawValue: 1)
        
//         /// The home key.
//         public static let home = SpecialKey(rawValue: 1)
        
//         /// The end key.
//         public static let end = SpecialKey(rawValue: 1)
        
//         /// The previous key.
//         public static let prev = SpecialKey(rawValue: 1)
        
//         /// The next key.
//         public static let next = SpecialKey(rawValue: 1)
        
//         // MARK: - Getting Special Behavior Keys

//         /// The begin key.
//         public static let begin = SpecialKey(rawValue: 1)
        
//         /// The break key.
//         public static let `break` = SpecialKey(rawValue: 1)
        
//         /// The clear display key.
//         public static let clearDisplay = SpecialKey(rawValue: 1)
        
//         /// The clear line key.
//         public static let clearLine = SpecialKey(rawValue: 1)
        
//         /// The delete character key.
//         public static let deleteCharacter = SpecialKey(rawValue: 1)
        
//         /// The delete line key.
//         public static let deleteLine = SpecialKey(rawValue: 1)
        
//         /// The execute key.
//         public static let execute = SpecialKey(rawValue: 1)
        
//         /// The find key.
//         public static let find = SpecialKey(rawValue: 1)
        
//         /// The form feed key.
//         public static let formFeed = SpecialKey(rawValue: 1)
        
//         /// The help key.
//         public static let help = SpecialKey(rawValue: 1)
        
//         /// The insert key.
//         public static let insert = SpecialKey(rawValue: 1)
        
//         /// The insert character key.
//         public static let insertCharacter = SpecialKey(rawValue: 1)
        
//         /// The insert line key.
//         public static let insertLine = SpecialKey(rawValue: 1)
        
//         /// The line separator key.
//         public static let lineSeparator = SpecialKey(rawValue: 1)
        
//         /// The menu key.
//         public static let menu = SpecialKey(rawValue: 1)
        
//         /// The mode switch key.
//         public static let modeSwitch = SpecialKey(rawValue: 1)
        
//         /// The paragraph separator key.
//         public static let paragraphSeparator = SpecialKey(rawValue: 1)
        
//         /// The pause key.
//         public static let pause = SpecialKey(rawValue: 1)
        
//         /// The print key.
//         public static let print = SpecialKey(rawValue: 1)
        
//         /// The print screen key.
//         public static let printScreen = SpecialKey(rawValue: 1)
        
//         /// The redo key.
//         public static let redo = SpecialKey(rawValue: 1)
        
//         /// The reset key.
//         public static let reset = SpecialKey(rawValue: 1)
        
//         /// The scroll lock key.
//         public static let scrollLock = SpecialKey(rawValue: 1)
        
//         /// The select key.
//         public static let select = SpecialKey(rawValue: 1)
        
//         /// The stop key.
//         public static let stop = SpecialKey(rawValue: 1)
        
//         /// The system request key.
//         public static let sysReq = SpecialKey(rawValue: 1)
        
//         /// The system key.
//         public static let system = SpecialKey(rawValue: 1)
        
//         /// The undo key.
//         public static let undo = SpecialKey(rawValue: 1)
        
//         /// The user key.
//         public static let user = SpecialKey(rawValue: 1)

//         // MARK: - Getting the Function Keys

//         /// The F1 key.
//         public static let f1 = SpecialKey(rawValue: 1)
        
//         /// The F2 key.
//         public static let f2 = SpecialKey(rawValue: 1)
        
//         /// The F3 key.
//         public static let f3 = SpecialKey(rawValue: 1)
        
//         /// The F4 key.
//         public static let f4 = SpecialKey(rawValue: 1)
        
//         /// The F5 key.
//         public static let f5 = SpecialKey(rawValue: 1)
        
//         /// The F6 key.
//         public static let f6 = SpecialKey(rawValue: 1)
        
//         /// The F7 key.
//         public static let f7 = SpecialKey(rawValue: 1)
        
//         /// The F8 key.
//         public static let f8 = SpecialKey(rawValue: 1)
        
//         /// The F9 key.
//         public static let f9 = SpecialKey(rawValue: 1)
        
//         /// The F10 key.
//         public static let f10 = SpecialKey(rawValue: 1)
        
//         /// The F11 key.
//         public static let f11 = SpecialKey(rawValue: 1)
        
//         /// The F12 key.
//         public static let f12 = SpecialKey(rawValue: 1)
        
//         /// The F13 key.
//         public static let f13 = SpecialKey(rawValue: 1)
        
//         /// The F14 key.
//         public static let f14 = SpecialKey(rawValue: 1)
        
//         /// The F15 key.
//         public static let f15 = SpecialKey(rawValue: 1)
        
//         /// The F16 key.
//         public static let f16 = SpecialKey(rawValue: 1)
        
//         /// The F17 key.
//         public static let f17 = SpecialKey(rawValue: 1)
        
//         /// The F18 key.
//         public static let f18 = SpecialKey(rawValue: 1)
        
//         /// The F19 key.
//         public static let f19 = SpecialKey(rawValue: 1)
        
//         /// The F20 key.
//         public static let f20 = SpecialKey(rawValue: 1)
        
//         /// The F21 key.
//         public static let f21 = SpecialKey(rawValue: 1)
        
//         /// The F22 key.
//         public static let f22 = SpecialKey(rawValue: 1)
        
//         /// The F23 key.
//         public static let f23 = SpecialKey(rawValue: 1)
        
//         /// The F24 key.
//         public static let f24 = SpecialKey(rawValue: 1)
        
//         /// The F25 key.
//         public static let f25 = SpecialKey(rawValue: 1)
        
//         /// The F26 key.
//         public static let f26 = SpecialKey(rawValue: 1)
        
//         /// The F27 key.
//         public static let f27 = SpecialKey(rawValue: 1)
        
//         /// The F28 key.
//         public static let f28 = SpecialKey(rawValue: 1)
        
//         /// The F29 key.
//         public static let f29 = SpecialKey(rawValue: 1)
        
//         /// The F30 key.
//         public static let f30 = SpecialKey(rawValue: 1)
        
//         /// The F31 key.
//         public static let f31 = SpecialKey(rawValue: 1)
        
//         /// The F32 key.
//         public static let f32 = SpecialKey(rawValue: 1)
        
//         /// The F33 key.
//         public static let f33 = SpecialKey(rawValue: 1)
        
//         /// The F34 key.
//         public static let f34 = SpecialKey(rawValue: 1)
        
//         /// The F35 key.
//         public static let f35 = SpecialKey(rawValue: 1)
        
//         // MARK: - Creating a Key with a Raw Value

//         public var rawValue: Int
        
//         /// Creates a key constant with the specified value.
//         public init(rawValue: Int) {
//             self.rawValue = rawValue
//         }
//     }
// }