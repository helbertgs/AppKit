import Foundation 
import OpenCoreGraphics

/// An object that contains information about an input action, such as a mouse click or a key press.
@MainActor
public class NSEvent: NSObject {

    //  MARK: - Creating an event object

    /// Creates and returns a new event object that describes a key event.
    /// - Parameters:
    ///   - type: One of the following event-type constants: NSKeyDown, NSKeyUp, NSFlagsChanged. If anything else is specified, an NSInternalInconsistencyException is raised.
    ///   - location: The cursor location in the base coordinate system of the window specified by windowNum.
    ///   - flags: An integer bit field containing any of the modifier key masks described in Getting Unicode Values, combined using the C bitwise OR operator.
    ///   - timestamp: The time the event occurred in seconds since system startup.
    ///   - windowNum: An integer that identifies the window device associated with the event, which is associated with the NSWindow that will receive the event.
    ///   - context: The display graphics context of the event. Pass nil for this parameter.
    ///   - characters: A string of characters associated with the key event. Though most key events contain only one character, it is possible for a single keypress to generate a series of characters.
    ///   - charactersIgnoringModifiers: The string of characters generated by the key event as if no modifier key had been pressed (except for Shift). This argument is useful for getting the “basic” key value in a hardware-independent manner.
    ///   - isARepeat: true if the key event is a repeat caused by the user holding the key down, false if the key event is new.
    ///   - code: A number that identifies the keyboard key associated with the key event. Its value is hardware-independent.
    /// - Returns: The created NSEvent instance or nil if the instance could not be created.
    public static func keyEvent(
        with type: NSEvent.EventType, 
        location: OpenCoreGraphics.CGPoint = .init(), 
        modifierFlags flags: NSEvent.ModifierFlags = .none, 
        timestamp time: TimeInterval = Date().timeIntervalSince1970, 
        windowNumber wNum: Int = 0, 
        context unusedPassNil: OpaquePointer? = nil, 
        characters keys: String, 
        charactersIgnoringModifiers ukeys: String, 
        isARepeat flag: Bool = false, 
        keyCode code: Int) -> NSEvent? {
            let event = NSEvent()
            event.type = type
            event.locationInWindow = location
            event.modifierFlags = flags
            event.timestamp = time
            event.windowNumber = wNum

            return event
    }

    public static func mouseEvent(
        with type: NSEvent.EventType,
        location: OpenCoreGraphics.CGPoint = .init(),
        modifierFlags flags: NSEvent.ModifierFlags = .none,
        timestamp time: TimeInterval = Date().timeIntervalSince1970,
        windowNumber wNum: Int = 0,
        context unusedPassNil: NSGraphicsContext? = nil,
        eventNumber eNum: Int = 0,
        clickCount cNum: Int = 0,
        pressure: Float = 0
    ) -> NSEvent? {
        let event = NSEvent()
        event.type = type
        event.locationInWindow = location
        event.modifierFlags = flags
        event.timestamp = time
        event.windowNumber = wNum

        return event
    }

    func enterExitEvent(
        with type: NSEvent.EventType,
        location: OpenCoreGraphics.CGPoint = .init(),
        modifierFlags flags: NSEvent.ModifierFlags = .none,
        timestamp time: TimeInterval = Date().timeIntervalSince1970,
        windowNumber wNum: Int = 0,
        context unusedPassNil: NSGraphicsContext? = nil,
        eventNumber eNum: Int = 0,
        trackingNumber tNum: Int = 0,
        userData data: UnsafeMutableRawPointer? = nil
    ) -> NSEvent? {
        return nil
    }

    // MARK: - Getting the event type

    /// The event’s type.
    public private(set) var type: NSEvent.EventType = .systemDefined

    /// The event’s subtype.
    public private(set) var subtype: NSEvent.EventSubtype = .none

    // MARK: - Getting general event information

    /// The event location in the base coordinate system of the associated window.
    /// 
    /// This property applies to mouse events. 
    /// For non-mouse events the value of this property is undefined.
    /// 
    /// With NSMouseMoved and possibly other events, the event can have a nil window (that is, the window property contains nil). In this case, this property contains the event location in screen coordinates.
    /// 
    /// In a method of a custom view that handles mouse events, you commonly use this property with the ``convert(_:from:)`` method of NSView to get the mouse location in the view’s coordinate system. 
    /// The following code shows how to perform this conversion. 
    /// The y coordinate in the returned point starts from a base of 1, and not 0.
    public var locationInWindow: OpenCoreGraphics.CGPoint = .init()
    
    /// The time when the event occurred in seconds since system startup.
    public var timestamp: TimeInterval = .init()

    /// The window object associated with the event.
    /// Periodic events do not have a window. The result of accessing this property on a periodic event is undefined.
    public weak var window: NSWindow?

    /// The identifier for the window device associated with the event.
    /// Periodic events do not have a window. The result of accessing this property on a periodic event is undefined.
    public var windowNumber: Int = 0

    // MARK: - Getting modifier flags

    /// An integer bit field that indicates the pressed modifier keys.
    ///
    /// You can examine individual flag settings using the C bitwise AND operator with the predefined key masks described in Getting Unicode Values. 
    /// The lower 16 bits of the modifier flags are reserved for device-dependent bits.
    public var modifierFlags: NSEvent.ModifierFlags = .none
}


extension NSEvent: @preconcurrency CustomStringConvertible {
    @MainActor public var description: String {
        """
        Event Type: \(type)
        Location in Window: \(locationInWindow)
        Modifier Flags: \(modifierFlags)
        Timestamp: \(timestamp)
        """
    }
}